<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Disinformation on The NullCereal Blog</title><link>https://nullcereal.com/tags/disinformation/</link><description>Recent content in Disinformation on The NullCereal Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 10 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://nullcereal.com/tags/disinformation/index.xml" rel="self" type="application/rss+xml"/><item><title>Security 404 - Disinformation Injection Attacks</title><link>https://nullcereal.com/2020/09/security-404-disinformation-injection-attacks/</link><pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate><guid>https://nullcereal.com/2020/09/security-404-disinformation-injection-attacks/</guid><description>&lt;blockquote>
&lt;p>Disinformation isn’t just a social engineering attack, it’s an buffer overflow attack of the mind.&lt;/p>
&lt;/blockquote>
&lt;p>Most people may not be familiar with an information security vulnerability called a buffer overflow. Here&amp;rsquo;s a small example:&lt;/p>
&lt;p>&lt;img src="https://www.hackingtutorials.org/wp-content/uploads/2016/12/buffer-overflow-strcpy-example.jpg" alt="bof">&lt;/p>
&lt;p>Buffer Overflow attacks work when a program needs to accept input from the user (think of a program that asks for your username, like the example above). The issue is that the programmer uses a function like &lt;em>strcpy()&lt;/em> where the size of the destination is not specified. The problem here is two fold:
1. If you throw enough data into this input area, it can crash, resulting in a Denial of Service condition.
2. If you craft a specialized request, taking into account memory allocations, you can trick the program into running almost any code you want it to run.&lt;/p></description></item></channel></rss>